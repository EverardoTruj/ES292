library(githubr)
library(rethinking)
sample<-c(L,L,L,W,W,W,W,W,W,W)
sample<-c("L","L","L","W","W","W","W","W","W","W")
w<-sum(sample=="W")
l<-sum(sample=="L")
w<-sum(sample=="W")
l<-sum(sample=="L")
p<-0.3
ways<-sapply(p,fuction(q) (2*q)^L*((1-q)*2)W)
ays<-sapply(p,fuction(q) (2*q)^L*((1-q)*2)^W)
ways<-sapply(p,fuction(q)=(2*q)^L*((1-q)*2)^W)
ways<-sapply(p,fuction(q)(2*q)^L*((1-q)*2)^W)
ways<-sapply(list, function)(p,fuction(q)(2*q)^L*((1-q)*2)^W)
ways<-sapply(list, function)(p, fuction(q)(2*q)^L*((1-q)*2)^W)
ways<-sapply(p, fuction(q)(2*q)^L*((1-q)*2)^W)
ways<-sapply(p, fuction(q)((2*q)^L*((1-q)*2)^W)
prob<- ways/sum(ways)
prob<- ways/sum(ways)
ways<-sapply(p, fuction(q)((2*q)^L*((1-q)*2)^W)
prob<- ways/sum(ways)
w<-sum(sample=="W")
l<-sum(sample=="L")
p<-(0, 0.3, 0.5)
p<-(0,0.3,0.5)
p<-c(0,0.3,0.5)
ways<-sapply(p, fuction(q)((2*q)^L*((1-q)*2)^W)
prob<- ways/sum(ways)
prob<- ways/sum(ways)
ways<-sapply(p, fuction(q)((2*q)^L*((1-q)*2)^W)
ways<-sapply(p, (2*q))
ways<-c(0,9)
prob<- ways/sum(ways)
cbind(p,ways,prob)
sample<-c("L","L")
w<-sum(sample=="W")
l<-sum(sample=="L")
p<-c(0,0.3,0.5)
ways<-c(0,9)
prob<- ways/sum(ways)
cbind(p,ways,prob)
#Chapter 5: Multivariate linear models
# load data
library(rethinking)
data(WaffleDivorce)
d <- WaffleDivorce
# standardize predictor
d$MedianAgeMarriage.s <- (d$MedianAgeMarriage-mean(d$MedianAgeMarriage))/
sd(d$MedianAgeMarriage)
# fit model
m5.1 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bA * MedianAgeMarriage.s ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d )
d$MedianAgeMarriage.s
# compute percentile interval of mean
MAM.seq <- seq( from=-3 , to=3.5 , length.out=30 )
mu <- link( m5.1 , data=data.frame(MedianAgeMarriage.s=MAM.seq) )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( Divorce ~ MedianAgeMarriage.s , data=d , col=rangi2 )
abline( m5.1 )
shade( mu.PI , MAM.seq )
#Chapter 5: Multivariate linear models
# load data
library(rethinking)
data(WaffleDivorce)
d <- WaffleDivorce
# standardize predictor
d$MedianAgeMarriage.s <- (d$MedianAgeMarriage-mean(d$MedianAgeMarriage))/
sd(d$MedianAgeMarriage)
# fit model
m5.1 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bA * MedianAgeMarriage.s ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d )
m5.1
# compute percentile interval of mean
MAM.seq <- seq( from=-3 , to=3.5 , length.out=30 )
mu <- link( m5.1 , data=data.frame(MedianAgeMarriage.s=MAM.seq) )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( Divorce ~ MedianAgeMarriage.s , data=d , col=rangi2 )
abline( m5.1 )
shade( mu.PI , MAM.seq )
precis(m5.1)
d$Marriage.s <- (d$Marriage - mean(d$Marriage))/sd(d$Marriage)
m5.2 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bR * Marriage.s ,
a ~ dnorm( 10 , 10 ) ,
bR ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d )
precis(m5.2)
m5.2
#First example of multivariate model
m5.3 <- map( 5.4
alist(
#First example of multivariate model
m5.3 <- map(
alist(
Divorce ~ dnorm( mu , sigma ) ,
mu <- a + bR*Marriage.s + bA*MedianAgeMarriage.s ,
a ~ dnorm( 10 , 10 ) ,
bR ~ dnorm( 0 , 1 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) ,
data = d )
precis( m5.3
precis( m5.3 )
plot( precis(m5.3) )
# load data
library(rethinking)
data(milk)
milk<-data(milk)
str(milk)
data(milk)
d<-milk
str(d)
d
dcc <- d[ complete.cases(d) , ]
m5.5 <- map(
alist(
kcal.per.g ~ dnorm( mu , sigma ) ,
mu <- a + bn*neocortex.perc ,
a ~ dnorm( 0 , 100 ) ,
bn ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 1 )
) ,
data=dcc )
precis( m5.5 , digits=3 )
np.seq <- 0:100 5.23
np.seq <- 0:100
pred.data <- data.frame( neocortex.perc=np.seq )
mu <- link( m5.5 , data=pred.data , n=1e4 )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
plot( kcal.per.g ~ neocortex.perc , data=dcc , col=rangi2 )
lines( np.seq , mu.mean )
lines( np.seq , mu.PI[1,] , lty=2 )
lines( np.seq , mu.PI[2,] , lty=2 )
dcc$log.mass <- log(dcc$mass)
m5.6 <- map(
alist(
kcal.per.g ~ dnorm( mu , sigma ) ,
mu <- a + bm*log.mass ,
a ~ dnorm( 0 , 100 ) ,
bm ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 1 )
) ,
data=dcc )
precis(m5.6)
data(foxes)
# load data
library(rethinking)
data(foxes)
foxes
D<-foxes
D
str(D)
# standardize predictor
D$area <- (D$area-mean(D$area))/sd(D$area)
E1 <- map(
alist(
BodyWeight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = d )
E1 <- map(
alist(
BodyWeight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = D )
str(D)
E1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = D )
E1.1 <- map(
alist(
groupsize ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = D )
E1.2 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area ,
a ~ dnorm( 10 , 10 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = D )
precis( E1.1 , corr=TRUE )
precis( E1.1 , corr=TRUE )
precis( E1.2 , corr=TRUE )
D
E1.1 <- map(
alist(
groupsize ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area ,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = D )
E1.2 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area ,
a ~ dnorm( 4 , 1 ) ,
bA ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 10 )
) , data = D )
precis( E1.1 , corr=TRUE )
precis( E1.2 , corr=TRUE )
plot( groupsize ~ weight , data=D )
plot( groupsize ~ weight , data=D )
abline( a=coef(E1.1)["a"] , b=coef(E1.1)["b"]
# display raw data and sample size
plot( D$area , D$groupsize ,
plot( D$area , D$groupsize ,
xlim=range(D$area) , ylim=range(D$groupsize) ,
col=rangi2 , xlab="Area" , ylab="Group size" )
mtext(concat("N = ",N))
N<-10
plot( D$area , D$groupsize ,
xlim=range(D$area) , ylim=range(D$groupsize) ,
col=rangi2 , xlab="Area" , ylab="Group size" )
mtext(concat("N = ",N))
# plot the lines, with transparency
for ( i in 1:20 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.3)
N<-30
N<-30
plot( D$area , D$groupsize ,
xlim=range(D$area) , ylim=range(D$groupsize) ,
col=rangi2 , xlab="Area" , ylab="Group size" )
mtext(concat("N = ",N))
# plot the lines, with transparency
for ( i in 1:20 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.3)
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9)
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9)
N<-30
plot( D$area , D$groupsize ,
xlim=range(D$area) , ylim=range(D$groupsize) ,
col=rangi2 , xlab="Area" , ylab="Group size" )
mtext(concat("N = ",N))
# plot the lines, with transparency
for ( i in 1:30 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9))
post <- extract.samples(E1.1, n=30 )
# display raw data and sample size
N<-30
plot( D$area , D$groupsize ,
xlim=range(D$area) , ylim=range(D$groupsize) ,
col=rangi2 , xlab="Area" , ylab="Group size" )
mtext(concat("N = ",N))
# plot the lines, with transparency
for ( i in 1:30 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9))
post <- extract.samples(E1.1, n=30 )
# display raw data and sample size
N<-30
plot( D$area , D$groupsize ,
xlim=range(D$area) , ylim=range(D$groupsize) ,
col=rangi2 , xlab="Area" , ylab="Group size" )
mtext(concat("N = ",N))
# plot the lines, with transparency
for ( i in 1:30 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9))
N<-30
plot( D$area , D$weight ,
xlim=range(D$area) , ylim=range(D$weight) ,
col=rangi2 , xlab="Area" , ylab="weight" )
mtext(concat("N = ",N))
# plot the lines, with transparency
for ( i in 1:30 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9))
H2.1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area +bR*D$groupsize,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ),
bR ~ dnorm( 0 , 1 )
sigma ~ dunif( 0 , 10 )
H2.1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area +bR*D$groupsize,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ),
bR ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
precis(H2.1)
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
weight=R.seq,
D$area=A.avg)
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
weight=R.seq, D$area=A.avg)
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
D$weight=R.seq, D$area=A.avg)
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
D$weight=R.seq,
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
D$weight = R.seq,
# prepare new counterfactual data 5.9
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
A.avg <- mean(  D$area )
R.seq <- seq( from=0 , to=7 , length.out=30 )
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
D
A.avg <- mean(  D$area )
R.seq <- seq( from=0 , to=7 , length.out=116 )
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
pre.data <- data.frame(R.seq,A.avg)
mu <- link( H2.1 , data=pred.data )
pred.data <- data.frame(R.seq,A.avg)
mu <- link( H2.1 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
.sim <- sim(H2.1 , data=pred.data , n=1e4
R.PI <- apply( R.sim , 2 , PI )
R.sim <- sim(H2.1 , data=pred.data , n=1e4
R.PI <- apply( R.sim , 2 , PI )
R.sim <- sim(H2.1 , data=pred.data , n=1e4
R.PI <- apply( R.sim , 2 , PI )
R.sim <- sim(H2.1 , data=pred.data , n=1e4)
R.sim <- sim(H2.1 , data=pred.data , n=1e4)
R.PI <- apply( R.sim , 2 , PI )
plot( weight ~ D$area , data=D , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
H2.1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area +bR*D$groupsize,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ),
bR ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
# prepare new counterfactual data
A.avg <- mean(  D$area )
R.seq <- seq( from=0 , to=7 , length.out=116 )
pred.data <- data.frame(R.seq,A.avg)
pred.data <- data.frame(
weight = R.seq,
D$area = A.avg
# compute counterfactual mean weight (mu)
mu <- link( H2.1 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual weight outcomes
R.sim <- sim(H2.1 , data=pred.data , n=1e4)
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$area , data=D , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(R.seq,A.avg)
# compute counterfactual mean weight (mu)
mu <- link( H2.1 , data=pred.data )
