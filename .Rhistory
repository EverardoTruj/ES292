# plot the lines, with transparency
for ( i in 1:30 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9))
N<-30
plot( D$area , D$weight ,
xlim=range(D$area) , ylim=range(D$weight) ,
col=rangi2 , xlab="Area" , ylab="weight" )
mtext(concat("N = ",N))
# plot the lines, with transparency
for ( i in 1:30 )
abline( a=post$a[i] , b=post$b[i] , col=col.alpha("black",0.9))
#5H2. Now fit a multiple linear regression with weight as the outcome and both area and groupsize as predictor variables. Plot the predictions of the model for each predictor, holding the other predictor constant at its mean. What does this model say about the importance of each variable? Why do you get different results than you got in the exercise just above?
H2.1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area +bR*D$groupsize,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ),
bR ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
precis(H2.1)
# prepare new counterfactual data
A.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(R.seq,A.avg)
# compute counterfactual mean weight (mu)
mu <- link( H2.1 , data=pred.data )
# compute counterfactual mean weight (mu)
mu <- link( H2.1 , data=pred.data )
H2.2 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area +bR*D$groupsize,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ),
bR ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
pred.data <- data.frame(R.seq,w.avg)
# prepare new counterfactual data
W.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(R.seq,w.avg)
pred.data <- data.frame(R.seq,W.avg)
# compute counterfactual mean weight (mu)
mu <- link( H2.1 , data=pred.data )
# compute counterfactual mean weight (mu)
mu <- link( H2.2 , data=pred.data )
R.seq <- seq( from=-3 , to=3 , length.out=10 )
# compute counterfactual mean weight (mu)
mu <- link( H2.2 , data=pred.data )
W.avg <- mean(  D$area )
R.seq <- seq( from=-3 , to=3 , length.out=10 )
pred.data <- data.frame(R.seq,W.avg)
# compute counterfactual mean weight (mu)
mu <- link( H2.2 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
pred.data
R.seq <- seq( from=-3 , to=3 , length.out=30 )
pred.data <- data.frame(R.seq,W.avg)
pred.data
H2.2
D
R.seq <- seq( from=-3 , to=3 , length.out=116 )
pred.data <- data.frame(R.seq,W.avg)
# compute counterfactual mean weight (mu)
mu <- link( H2.2 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
R.sim <- sim(H2.1 , data=pred.data , n=1e4)
R.sim <- sim(H2.1 , data=pred.data , n=1e4)
R.PI <- apply( R.sim , 2 , PI )
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$area , data=D , type="n" )
W.avg <- mean(  D$area )
R.seq <- seq( from=-20 , to=20 , length.out=116 )
pred.data <- data.frame(R.seq,W.avg)
pred.data
# compute counterfactual mean weight (mu)
mu <- link( H2.2 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual weight outcomes
R.sim <- sim(H2.1 , data=pred.data , n=1e4)
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$area , data=D , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
H2.2 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area +bR*D$groupsize,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ),
bR ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
# prepare new counterfactual data
W.avg <- mean(  D$area )
R.seq <- seq( from=-20 , to=20 , length.out=116 )
pred.data <- data.frame(R.seq,W.avg)
# compute counterfactual mean weight (mu)
mu <- link( H2.2 , data=pred.data )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI )
# simulate counterfactual weight outcomes
R.sim <- sim(H2.1 , data=pred.data , n=1e4)
R.PI <- apply( R.sim , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$area , data=D , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq , mu.mean )
shade( mu.PI , R.seq )
shade( R.PI , R.seq )
# prepare new counterfactual data
W.avg2 <- mean(  D$groupsize )
R.seq2 <- seq( from=-20 , to=20 , length.out=116 )
pred.data2 <- data.frame(R.seq2,W.avg2)
# compute counterfactual mean weight (mu)
mu2 <- link( H2.2 , data=pred.data2 )
mu.mean2 <- apply( mu2 , 2 , mean )
mu.PI2 <- apply( mu2 , 2 , PI )
# simulate counterfactual weight outcomes
R.sim2 <- sim(H2.1 , data=pred.data2 , n=1e4)
R.PI2 <- apply( R.sim2 , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$groupsize , data=D , type="n" )
mtext( "MedianAgeMarriage.s = 0" )
lines( R.seq2 , mu.mean2 )
shade( mu.PI2 , R.seq2 )
shade( R.PI2 , R.seq2 )
H3.1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a +bR*D$groupsize+bZ*D$avgfood,
a ~ dnorm( 4 , 1) ,
bR ~ dnorm( 0 , 1 ),
bZ ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
H3.2 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a + bA * D$area +bR*D$groupsize+bZ*D$avgfood,
a ~ dnorm( 4 , 1) ,
bA ~ dnorm( 0 , 1 ),
bR ~ dnorm( 0 , 1 ),
bZ ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
W.avg3.1 <- mean(  D$avgfood )
R.seq3.1 <- seq( from=-20 , to=20 , length.out=116 )
pred.data3.1 <- data.frame(R.seq,W.avg)
# compute counterfactual mean weight (mu)
mu3.1 <- link( H3.1 , data=pred.data3.1 )
mu.mean3.1 <- apply( mu3.1 , 2 , mean )
mu.PI3.1 <- apply( mu3.1 , 2 , PI )
# simulate counterfactual weight outcomes
R.sim3.1 <- sim(H3.1 , data=pred.data3.1 , n=1e4)
R.PI3.1 <- apply( R.sim3.1 , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$groupsize , data=D , type="n" )
mtext( "Median group size" )
lines( R.seq3.1 , mu.mean3.1 )
shade( mu.PI3.1 , R.seq3.1 )
shade( R.PI3.1 , R.seq3.1 )
W.avg3.1 <- mean(  D$avgfood )
R.seq3.1 <- seq( from=-10 , to=10 , length.out=116 )
pred.data3.1 <- data.frame(R.seq,W.avg)
# compute counterfactual mean weight (mu)
mu3.1 <- link( H3.1 , data=pred.data3.1 )
mu.mean3.1 <- apply( mu3.1 , 2 , mean )
mu.PI3.1 <- apply( mu3.1 , 2 , PI )
# simulate counterfactual weight outcomes
R.sim3.1 <- sim(H3.1 , data=pred.data3.1 , n=1e4)
R.PI3.1 <- apply( R.sim3.1 , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$groupsize , data=D , type="n" )
mtext( "Median group size" )
lines( R.seq3.1 , mu.mean3.1 )
shade( mu.PI3.1 , R.seq3.1 )
shade( R.PI3.1 , R.seq3.1 )
mu3.1 <- link( H3.1 , data=pred.data3.1 )
mu.mean3.1 <- apply( mu3.1 , 2 , mean )
mu.PI3.1 <- apply( mu3.1 , 2 , PI )
# simulate counterfactual weight outcomes
R.sim3.1 <- sim(H3.1 , data=pred.data3.1 , n=1e4)
R.PI3.1 <- apply( R.sim3.1 , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$avgfood , data=D , type="n" )
mtext( "Median group size" )
lines( R.seq3.1 , mu.mean3.1 )
shade( mu.PI3.1 , R.seq3.1 )
shade( R.PI3.1 , R.seq3.1 )
W.avg3.1 <- mean(  D$avgfood )
R.seq3.1 <- seq( from=-20 , to=20 , length.out=116 )
pred.data3.1 <- data.frame(R.seq3.1,W.avg3.1)
# compute counterfactual mean weight (mu)
mu3.1 <- link( H3.1 , data=pred.data3.1 )
mu.mean3.1 <- apply( mu3.1 , 2 , mean )
mu.PI3.1 <- apply( mu3.1 , 2 , PI )
# simulate counterfactual weight outcomes
R.sim3.1 <- sim(H3.1 , data=pred.data3.1 , n=1e4)
R.PI3.1 <- apply( R.sim3.1 , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$avgfood , data=D , type="n" )
mtext( "Median group size" )
lines( R.seq3.1 , mu.mean3.1 )
shade( mu.PI3.1 , R.seq3.1 )
shade( R.PI3.1 , R.seq3.1 )
H3.1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a +bR*D$groupsize+bZ*D$avgfood,
a ~ dnorm( 4 , 1) ,
bR ~ dnorm( 0 , 1 ),
bZ ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$avgfood , data=D , type="n" )
plot( weight ~ D$avgfood , data=D , type="n" )
mtext( "Median group size" )
lines( R.seq3.1 , mu.mean3.1 )
shade( mu.PI3.1 , R.seq3.1 )
shade( R.PI3.1 , R.seq3.1 )
mu3.1 <- link( H3.1 , data=pred.data3.1 )
mu.mean3.1 <- apply( mu3.1 , 2 , mean )
mu.PI3.1 <- apply( mu3.1 , 2 , PI )
# simulate counterfactual weight outcomes
R.sim3.1 <- sim(H3.1 , data=pred.data3.1 , n=1e4)
R.PI3.1 <- apply( R.sim3.1 , 2 , PI )
# display predictions, hiding raw data with type="n"
plot(  D$avgfood ~ weight , data=D , type="n" )
mtext( "Median group size" )
lines( R.seq3.1 , mu.mean3.1 )
shade( mu.PI3.1 , R.seq3.1 )
shade( R.PI3.1 , R.seq3.1 )
H3.1 <- map(
alist(
weight ~ dnorm( mu , sigma ) ,
mu <- a +bR*D$groupsize+bZ*D$avgfood,
a ~ dnorm( 4 , 1) ,
bR ~ dnorm( 0 , 1 ),
bZ ~ dnorm( 0 , 1 ),
sigma ~ dunif( 0 , 10 )
) , data = D )
W.avg3.1 <- mean(  D$avgfood )
R.seq3.1 <- seq( from=-20 , to=20 , length.out=116 )
pred.data3.1 <- data.frame(R.seq3.1,W.avg3.1)
# compute counterfactual mean weight (mu)
mu3.1 <- link( H3.1 , data=pred.data3.1 )
mu.mean3.1 <- apply( mu3.1 , 2 , mean )
mu.PI3.1 <- apply( mu3.1 , 2 , PI )
# simulate counterfactual weight outcomes
R.sim3.1 <- sim(H3.1 , data=pred.data3.1 , n=1e4)
R.PI3.1 <- apply( R.sim3.1 , 2 , PI )
# display predictions, hiding raw data with type="n"
plot( weight ~ D$avgfood , data=D , type="n" )
mtext( "Median group size" )
lines( R.seq3.1 , mu.mean3.1 )
shade( mu.PI3.1 , R.seq3.1 )
shade( R.PI3.1 , R.seq3.1 )
precis(H3.1)
library(rethinking)
data(rugged)
d7 <- rugged
str(D7)
str(d7)
d7
d7$log_gdp<-log(d7$rgdppc_2000)
# extract countries with GDP data
dd<-d7[complete.cases(d7$rgdppc_2000)]
# extract countries with GDP data
dd<-d[complete.cases(d7$rgdppc_2000)]
# extract countries with GDP data
dd<-d7[complete.cases(d7$rgdppc_2000),]
d.A1<-dd[dd$cont_africa==1,]#Africa
d.A0<-dd[dd$cont_africa==0,]#Africa
m7.1<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1)
sigma ~ dunif(0,10)
m7.1<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A1)
#Non-African nations
m7.2<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A0)
precis(m7.1)
precis(m7.2)
precis(m7.1)
precis(m7.2)
#plotting
plot(log_gdp ~ rugged, d7 )
plot(log_gdp ~ rugged, d7 )
abline(a=coef(m7.1) ["a"], b=coef(m7.1) ["bR"] )
rugged.seq <- seq( from=0 , to=10 , by=1 )
# use link to compute mu
# for each sample from posterior
# and for each weight in weight.seq
mu <- link( m7.1 , data=data.frame(rugged=rugged.seq) )
str(mu)
mu.mean <- apply( mu , 2 , mean )
mu.HPDI <- apply( mu , 2 , HPDI , prob=0.89 )
# plot raw data fading out points to make line and interval more visible
plot( log_gdp ~ rugged , data=d7 , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean mu for each weight
lines( rugged.seq , mu.mean )
# plot a shaded region for 89% HPDI
shade( mu.HPDI , rugged.seq )
sim.log_gdp <- sim( m7.1 , data=list(rugged=rugged.seq) )
log_gdp.PI <- apply( sim.log_gdp , 2 , PI , prob=0.89 )
# plot raw data
plot( log_gdp ~ rugged , d7 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( rugged.seq , mu.mean )
# draw HPDI region for line
shade( mu.HPDI , rugged.seq )
# draw PI region for simulated heights
shade( log_gdp.PI , rugged.seq )
#Chapter 7
library(rethinking)
data(rugged)
d7 <- rugged
# make log version of outcome
d7$log_gdp<-log(d7$rgdppc_2000)
# extract countries with GDP data
dd<-d7[complete.cases(d7$rgdppc_2000),]
# split countries into Africa and not-Africa
d.A1<-dd[dd$cont_africa==1,]#Africa
d.A0<-dd[dd$cont_africa==0,]#Africa
#Fitting the modeles:
#African nations
m7.1<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A1)
#Non-African nations
m7.2<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A0)
precis(m7.1)
precis(m7.2)
#plotting
plot(log_gdp ~ rugged, d7 )
abline(a=coef(m7.1) ["a"], b=coef(m7.1) ["bR"] )
# define sequence of weights to compute predictions for these values will be on the horizontal axis
rugged.seq <- seq( from=0 , to=10 , by=1 )
# use link to compute mu for each sample from posterior and for each weight in weight.seq
mu <- link( m7.1 , data=data.frame(rugged=rugged.seq) )
str(mu)
sim.log_gdp<- sim( m7.1 , data=list(weight=weight.seq) )
#Chapter 7
library(rethinking)
data(rugged)
d7 <- rugged
# make log version of outcome
d7$log_gdp<-log(d7$rgdppc_2000)
# extract countries with GDP data
dd<-d7[complete.cases(d7$rgdppc_2000),]
# split countries into Africa and not-Africa
d.A1<-dd[dd$cont_africa==1,]#Africa
d.A0<-dd[dd$cont_africa==0,]#Africa
#Fitting the modeles:
#African nations
m7.1<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A1)
#Non-African nations
m7.2<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A0)
precis(m7.1)
precis(m7.2)
#plotting
plot(log_gdp ~ rugged, d7 )
abline(a=coef(m7.1) ["a"], b=coef(m7.1) ["bR"] )
# define sequence of weights to compute predictions for these values will be on the horizontal axis
rugged.seq <- seq( from=0 , to=10 , by=1 )
# use link to compute mu for each sample from posterior and for each weight in weight.seq
mu <- link( m7.1 , data=data.frame(rugged=rugged.seq) )
str(mu)
sim.log_gdp<- sim( m7.1 , data=list(rugged=rugged.seq) )
# summarize the distribution of mu
mu.mean <- apply( mu , 2 , mean )
mu.HPDI <- apply( mu , 2 , HPDI , prob=0.89 )
# plot raw data fading out points to make line and interval more visible
plot( log_gdp ~ rugged , data=d7 , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean mu for each weight
lines( rugged.seq , mu.mean )
# plot a shaded region for 89% HPDI
shade( mu.HPDI , rugged.seq )
#Another example
sim.log_gdp <- sim( m7.1 , data=list(rugged=rugged.seq) )
log_gdp.PI <- apply( sim.log_gdp , 2 , PI , prob=0.89 )
# plot raw data
plot( log_gdp ~ rugged , d7 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( rugged.seq , mu.mean )
# draw HPDI region for line
shade( mu.HPDI , rugged.seq )
# draw PI region for simulated heights
shade( log_gdp.PI , rugged.seq )
#Chapter 7
library(rethinking)
data(rugged)
d7 <- rugged
# make log version of outcome
d7$log_gdp<-log(d7$rgdppc_2000)
# extract countries with GDP data
dd<-d7[complete.cases(d7$rgdppc_2000),]
# split countries into Africa and not-Africa
d.A1<-dd[dd$cont_africa==1,]#Africa
d.A0<-dd[dd$cont_africa==0,]#Africa
#Fitting the modeles:
#African nations
m7.1<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A1)
#Non-African nations
m7.2<-map(
alist(
log_gdp ~ dnorm(mu,sigma),
mu <-a+bR*rugged,
a ~ dnorm(8,100),
bR ~  dnorm(0,1),
sigma ~ dunif(0,10)
),
data= d.A0)
precis(m7.1)
precis(m7.2)
#plotting
plot(log_gdp ~ rugged, d7 )
abline(a=coef(m7.1) ["a"], b=coef(m7.1) ["bR"] )
# define sequence of weights to compute predictions for these values will be on the horizontal axis
rugged.seq <- seq( from=0 , to=7 , by=1 )
# use link to compute mu for each sample from posterior and for each weight in weight.seq
mu <- link( m7.1 , data=data.frame(rugged=rugged.seq) )
str(mu)
sim.log_gdp<- sim( m7.1 , data=list(rugged=rugged.seq) )
# summarize the distribution of mu
mu.mean <- apply( mu , 2 , mean )
mu.HPDI <- apply( mu , 2 , HPDI , prob=0.89 )
# plot raw data fading out points to make line and interval more visible
plot( log_gdp ~ rugged , data=d7 , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean mu for each weight
lines( rugged.seq , mu.mean )
# plot a shaded region for 89% HPDI
shade( mu.HPDI , rugged.seq )
#Another example
sim.log_gdp <- sim( m7.1 , data=list(rugged=rugged.seq) )
log_gdp.PI <- apply( sim.log_gdp , 2 , PI , prob=0.89 )
# plot raw data
plot( log_gdp ~ rugged , d7 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( rugged.seq , mu.mean )
# draw HPDI region for line
shade( mu.HPDI , rugged.seq )
# draw PI region for simulated heights
shade( log_gdp.PI , rugged.seq )
